generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(uuid())
  email                  String         @unique
  password               String
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @updatedAt @map("updated_at")
  image                  String?
  name                   String?
  accounts               Account[]
  user1Conversations     Conversation[] @relation("User1Conversations")
  user2Conversations     Conversation[] @relation("User2Conversations")
  receivedFriendRequests Friendship[]   @relation("ReceivedFriendRequests")
  sentFriendRequests     Friendship[]   @relation("SentFriendRequests")
  sentMessages           Message[]      @relation("SentMessages")
  posts                  Post[]
  reactions              Reaction[]
  sessions               Session[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id               String     @id @default(uuid())
  title            String
  content          String?
  published        Boolean    @default(false)
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  authorId         String
  sharedInMessages Message[]  @relation("SharedPosts")
  author           User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions        Reaction[]
  categories       Category[] @relation("CategoryToPost")

  @@map("posts")
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[] @relation("CategoryToPost")

  @@map("categories")
}

model Reaction {
  id        String       @id @default(uuid())
  userId    String
  postId    String
  type      ReactionType
  createdAt DateTime     @default(now()) @map("created_at")
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("reactions")
}

model Friendship {
  id         String           @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")
  receiver   User             @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User             @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friendships")
}

model Conversation {
  id        String    @id @default(uuid())
  user1Id   String
  user2Id   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user1     User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2     User      @relation("User2Conversations", fields: [user2Id], references: [id])
  messages  Message[]

  @@unique([user1Id, user2Id])
  @@map("converasations")
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  isEdited       Boolean      @default(false)
  sharedPostId   String?
  type           String?      @default("text")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  sharedPost     Post?        @relation("SharedPosts", fields: [sharedPostId], references: [id])

  @@map("messages")
}

enum ReactionType {
  LIKE
  DISLIKE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}
